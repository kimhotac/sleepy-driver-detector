name: üöÄ Publish to PyPI

on:
  # infra Î∏åÎûúÏπòÏóê Ìë∏Ïãú Ïãú ÏûêÎèô Î∞∞Ìè¨
  push:
    branches: [infra]

  # Î¶¥Î¶¨Ï¶à ÏÉùÏÑ± ÏãúÏóêÎèÑ Î∞∞Ìè¨ (Î∞±ÏóÖ)
  release:
    types: [published]

  # ÏàòÎèô Ïã§Ìñâ (infra Î∏åÎûúÏπòÏóêÏÑúÎßå)
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish"
        required: true
        default: "1.0.1"

jobs:
  # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/infra' || github.event_name == 'release'
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run basic import test
        run: |
          python -c "from sleepy_driver import quick_detector; print('Import success!')"
          python -c "from sleepy_driver import list_available_models; print('Models:', list_available_models())"

  # PyPI Î∞∞Ìè¨ (infra Î∏åÎûúÏπòÏóêÏÑúÎßå)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/infra' || github.event_name == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Auto increment version
        id: get_version
        run: |
          # ÌòÑÏû¨ Î≤ÑÏ†Ñ Í∞ÄÏ†∏Ïò§Í∏∞
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "üìã Current version: $CURRENT_VERSION"

          # Ìå®Ïπò Î≤ÑÏ†Ñ ÏûêÎèô Ï¶ùÍ∞Ä (1.1.4 -> 1.1.5)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "üöÄ New version: $NEW_VERSION"

          # pyproject.tomlÎßå ÏóÖÎç∞Ïù¥Ìä∏ (__init__.pyÎäî ÏûêÎèôÏúºÎ°ú ÏùΩÏñ¥Ïò¥)
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: auto increment version to ${{ steps.get_version.outputs.VERSION }}" || exit 0
          git push

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: List package contents
        run: |
          echo "üì¶ Built packages:"
          ls -la dist/
          echo ""
          echo "üìã Package contents:"
          python -m zipfile -l dist/*.whl | head -20

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "üöÄ Publishing sleepy-driver v${{ steps.get_version.outputs.VERSION }} to PyPI..."
          python -m twine upload dist/*
          echo "‚úÖ Successfully published to PyPI!"

      - name: Create GitHub release summary
        run: |
          echo "üéâ Package successfully published!" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Package**: sleepy-driver" >> $GITHUB_STEP_SUMMARY
          echo "üè∑Ô∏è **Version**: ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "üîó **PyPI**: https://pypi.org/project/sleepy-driver/" >> $GITHUB_STEP_SUMMARY
          echo "üåø **Branch**: infra" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ÏÑ§Ïπò Î∞©Î≤ï" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install sleepy-driver" >> $GITHUB_STEP_SUMMARY
          echo "sleepy-driver-demo" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # TestPyPI Î∞∞Ìè¨ (develop Î∏åÎûúÏπòÏö©)
  deploy-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "üß™ Publishing to TestPyPI..."
          python -m twine upload --repository testpypi dist/*
          echo "‚úÖ Successfully published to TestPyPI!"
